services:
  # Database
  postgres:
    image: postgres:16-alpine
    platform: linux/amd64
    container_name: espm-postgres
    environment:
      POSTGRES_USER: espm
      POSTGRES_PASSWORD: espm123
      POSTGRES_DB: espm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U espm"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    platform: linux/amd64
    container_name: espm-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@espm.local
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy

  # Cache
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: espm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Command API Service
  command-api:
    build:
      context: ../..
      dockerfile: deploy/docker/command-api/Dockerfile
    platform: linux/amd64
    container_name: espm-command-api
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Event Publisher Service
  event-publisher:
    build:
      context: ../..
      dockerfile: deploy/docker/event-publisher/Dockerfile
    platform: linux/amd64
    container_name: espm-event-publisher
    ports:
      - "8081:8080"
      - "9091:9090"
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Projections Service
  projections:
    build:
      context: ../..
      dockerfile: deploy/docker/projections/Dockerfile
    platform: linux/amd64
    container_name: espm-projections
    ports:
      - "8082:8080"
      - "9092:9090"
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Query API Service
  query-api:
    build:
      context: ../..
      dockerfile: deploy/docker/query-api/Dockerfile
    platform: linux/amd64
    container_name: espm-query-api
    ports:
      - "8083:8080"
      - "9093:9090"
    environment:
      - CONFIG_PATH=/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: espm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: espm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    platform: linux/amd64
    container_name: espm-jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  postgres_data:
  redis_data:
  grafana_data: 